/**
 * generated by Xtext 2.25.0
 */
package org.xtext.jsonProject.jsonProject.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.jsonProject.jsonProject.ArrayObject;
import org.xtext.jsonProject.jsonProject.BooleanObject;
import org.xtext.jsonProject.jsonProject.Final;
import org.xtext.jsonProject.jsonProject.Initialisation;
import org.xtext.jsonProject.jsonProject.Insert;
import org.xtext.jsonProject.jsonProject.JsonCommand;
import org.xtext.jsonProject.jsonProject.JsonCommands;
import org.xtext.jsonProject.jsonProject.JsonEntries;
import org.xtext.jsonProject.jsonProject.JsonEntry;
import org.xtext.jsonProject.jsonProject.JsonObject;
import org.xtext.jsonProject.jsonProject.JsonPrimitive;
import org.xtext.jsonProject.jsonProject.JsonProjectFactory;
import org.xtext.jsonProject.jsonProject.JsonProjectPackage;
import org.xtext.jsonProject.jsonProject.Modify;
import org.xtext.jsonProject.jsonProject.Mult;
import org.xtext.jsonProject.jsonProject.Operation;
import org.xtext.jsonProject.jsonProject.Path;
import org.xtext.jsonProject.jsonProject.Print;
import org.xtext.jsonProject.jsonProject.Remove;
import org.xtext.jsonProject.jsonProject.Select;
import org.xtext.jsonProject.jsonProject.Store;
import org.xtext.jsonProject.jsonProject.StringObject;
import org.xtext.jsonProject.jsonProject.Sum;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class JsonProjectFactoryImpl extends EFactoryImpl implements JsonProjectFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static JsonProjectFactory init()
  {
    try
    {
      JsonProjectFactory theJsonProjectFactory = (JsonProjectFactory)EPackage.Registry.INSTANCE.getEFactory(JsonProjectPackage.eNS_URI);
      if (theJsonProjectFactory != null)
      {
        return theJsonProjectFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new JsonProjectFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JsonProjectFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case JsonProjectPackage.JSON_COMMANDS: return createJsonCommands();
      case JsonProjectPackage.JSON_COMMAND: return createJsonCommand();
      case JsonProjectPackage.INITIALISATION: return createInitialisation();
      case JsonProjectPackage.OPERATION: return createOperation();
      case JsonProjectPackage.INSERT: return createInsert();
      case JsonProjectPackage.PATH: return createPath();
      case JsonProjectPackage.MODIFY: return createModify();
      case JsonProjectPackage.SUM: return createSum();
      case JsonProjectPackage.REMOVE: return createRemove();
      case JsonProjectPackage.MULT: return createMult();
      case JsonProjectPackage.SELECT: return createSelect();
      case JsonProjectPackage.FINAL: return createFinal();
      case JsonProjectPackage.STORE: return createStore();
      case JsonProjectPackage.PRINT: return createPrint();
      case JsonProjectPackage.JSON_OBJECT: return createJsonObject();
      case JsonProjectPackage.JSON_PRIMITIVE: return createJsonPrimitive();
      case JsonProjectPackage.ARRAY_OBJECT: return createArrayObject();
      case JsonProjectPackage.BOOLEAN_OBJECT: return createBooleanObject();
      case JsonProjectPackage.STRING_OBJECT: return createStringObject();
      case JsonProjectPackage.JSON_ENTRIES: return createJsonEntries();
      case JsonProjectPackage.JSON_ENTRY: return createJsonEntry();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case JsonProjectPackage.BOOLEAN:
        return createBooleanFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case JsonProjectPackage.BOOLEAN:
        return convertBooleanToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonCommands createJsonCommands()
  {
    JsonCommandsImpl jsonCommands = new JsonCommandsImpl();
    return jsonCommands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonCommand createJsonCommand()
  {
    JsonCommandImpl jsonCommand = new JsonCommandImpl();
    return jsonCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initialisation createInitialisation()
  {
    InitialisationImpl initialisation = new InitialisationImpl();
    return initialisation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Insert createInsert()
  {
    InsertImpl insert = new InsertImpl();
    return insert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Path createPath()
  {
    PathImpl path = new PathImpl();
    return path;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Modify createModify()
  {
    ModifyImpl modify = new ModifyImpl();
    return modify;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sum createSum()
  {
    SumImpl sum = new SumImpl();
    return sum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Remove createRemove()
  {
    RemoveImpl remove = new RemoveImpl();
    return remove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mult createMult()
  {
    MultImpl mult = new MultImpl();
    return mult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Select createSelect()
  {
    SelectImpl select = new SelectImpl();
    return select;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Final createFinal()
  {
    FinalImpl final_ = new FinalImpl();
    return final_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Store createStore()
  {
    StoreImpl store = new StoreImpl();
    return store;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Print createPrint()
  {
    PrintImpl print = new PrintImpl();
    return print;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonObject createJsonObject()
  {
    JsonObjectImpl jsonObject = new JsonObjectImpl();
    return jsonObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonPrimitive createJsonPrimitive()
  {
    JsonPrimitiveImpl jsonPrimitive = new JsonPrimitiveImpl();
    return jsonPrimitive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayObject createArrayObject()
  {
    ArrayObjectImpl arrayObject = new ArrayObjectImpl();
    return arrayObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanObject createBooleanObject()
  {
    BooleanObjectImpl booleanObject = new BooleanObjectImpl();
    return booleanObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringObject createStringObject()
  {
    StringObjectImpl stringObject = new StringObjectImpl();
    return stringObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonEntries createJsonEntries()
  {
    JsonEntriesImpl jsonEntries = new JsonEntriesImpl();
    return jsonEntries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonEntry createJsonEntry()
  {
    JsonEntryImpl jsonEntry = new JsonEntryImpl();
    return jsonEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.xtext.jsonProject.jsonProject.Boolean createBooleanFromString(EDataType eDataType, String initialValue)
  {
    org.xtext.jsonProject.jsonProject.Boolean result = org.xtext.jsonProject.jsonProject.Boolean.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBooleanToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JsonProjectPackage getJsonProjectPackage()
  {
    return (JsonProjectPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static JsonProjectPackage getPackage()
  {
    return JsonProjectPackage.eINSTANCE;
  }

} //JsonProjectFactoryImpl
