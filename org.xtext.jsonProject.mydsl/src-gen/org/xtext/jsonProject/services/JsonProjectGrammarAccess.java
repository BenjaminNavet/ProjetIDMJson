/*
 * generated by Xtext 2.25.0
 */
package org.xtext.jsonProject.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JsonProjectGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class JsonCommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.JsonCommands");
		private final Assignment cJsonCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJsonCommandsJsonCommandParserRuleCall_0 = (RuleCall)cJsonCommandsAssignment.eContents().get(0);
		
		//JsonCommands:
		//    jsonCommands+=JsonCommand*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//jsonCommands+=JsonCommand*
		public Assignment getJsonCommandsAssignment() { return cJsonCommandsAssignment; }
		
		//JsonCommand
		public RuleCall getJsonCommandsJsonCommandParserRuleCall_0() { return cJsonCommandsJsonCommandParserRuleCall_0; }
	}
	public class JsonCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.JsonCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInitInitialisationParserRuleCall_0_0 = (RuleCall)cInitAssignment_0.eContents().get(0);
		private final Assignment cOperationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_1_0 = (RuleCall)cOperationsAssignment_1.eContents().get(0);
		private final Assignment cFinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFinalFinalParserRuleCall_2_0 = (RuleCall)cFinalAssignment_2.eContents().get(0);
		
		//JsonCommand:
		//    init=Initialisation
		//    (operations+=Operation)*
		//    final=Final
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//init=Initialisation
		//(operations+=Operation)*
		//final=Final
		public Group getGroup() { return cGroup; }
		
		//init=Initialisation
		public Assignment getInitAssignment_0() { return cInitAssignment_0; }
		
		//Initialisation
		public RuleCall getInitInitialisationParserRuleCall_0_0() { return cInitInitialisationParserRuleCall_0_0; }
		
		//(operations+=Operation)*
		public Assignment getOperationsAssignment_1() { return cOperationsAssignment_1; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_1_0() { return cOperationsOperationParserRuleCall_1_0; }
		
		//final=Final
		public Assignment getFinalAssignment_2() { return cFinalAssignment_2; }
		
		//Final
		public RuleCall getFinalFinalParserRuleCall_2_0() { return cFinalFinalParserRuleCall_2_0; }
	}
	public class InitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Initialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilePathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilePathSTRINGTerminalRuleCall_1_0 = (RuleCall)cFilePathAssignment_1.eContents().get(0);
		
		//Initialisation:
		//    'load' filePath=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'load' filePath=STRING
		public Group getGroup() { return cGroup; }
		
		//'load'
		public Keyword getLoadKeyword_0() { return cLoadKeyword_0; }
		
		//filePath=STRING
		public Assignment getFilePathAssignment_1() { return cFilePathAssignment_1; }
		
		//STRING
		public RuleCall getFilePathSTRINGTerminalRuleCall_1_0() { return cFilePathSTRINGTerminalRuleCall_1_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInsertParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModifyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRemoveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMultParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSelectParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Operation:
		//    (Insert | Modify | Sum | Remove | Mult | Select)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Insert | Modify | Sum | Remove | Mult | Select)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_0() { return cInsertParserRuleCall_0; }
		
		//Modify
		public RuleCall getModifyParserRuleCall_1() { return cModifyParserRuleCall_1; }
		
		//Sum
		public RuleCall getSumParserRuleCall_2() { return cSumParserRuleCall_2; }
		
		//Remove
		public RuleCall getRemoveParserRuleCall_3() { return cRemoveParserRuleCall_3; }
		
		//Mult
		public RuleCall getMultParserRuleCall_4() { return cMultParserRuleCall_4; }
		
		//Select
		public RuleCall getSelectParserRuleCall_5() { return cSelectParserRuleCall_5; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cJsonObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJsonObjectJsonObjectParserRuleCall_1_0 = (RuleCall)cJsonObjectAssignment_1.eContents().get(0);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathPathParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		
		//Insert:
		//    'insert' jsonObject=JsonObject (path=Path)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'insert' jsonObject=JsonObject (path=Path)?
		public Group getGroup() { return cGroup; }
		
		//'insert'
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//jsonObject=JsonObject
		public Assignment getJsonObjectAssignment_1() { return cJsonObjectAssignment_1; }
		
		//JsonObject
		public RuleCall getJsonObjectJsonObjectParserRuleCall_1_0() { return cJsonObjectJsonObjectParserRuleCall_1_0; }
		
		//(path=Path)?
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//Path
		public RuleCall getPathPathParserRuleCall_2_0() { return cPathPathParserRuleCall_2_0; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPathAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValuesIDTerminalRuleCall_1_0_0 = (RuleCall)cValuesAssignment_1_0.eContents().get(0);
		private final RuleCall cGOBACKTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cROOTTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cValuesAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cValuesIDTerminalRuleCall_2_1_0_0 = (RuleCall)cValuesAssignment_2_1_0.eContents().get(0);
		private final RuleCall cGOBACKTerminalRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		
		//Path:
		//    {Path} (values+=ID | GOBACK | ROOT)
		//    ('.' (values+=ID | GOBACK))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Path} (values+=ID | GOBACK | ROOT)
		//('.' (values+=ID | GOBACK))*
		public Group getGroup() { return cGroup; }
		
		//{Path}
		public Action getPathAction_0() { return cPathAction_0; }
		
		//(values+=ID | GOBACK | ROOT)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//values+=ID
		public Assignment getValuesAssignment_1_0() { return cValuesAssignment_1_0; }
		
		//ID
		public RuleCall getValuesIDTerminalRuleCall_1_0_0() { return cValuesIDTerminalRuleCall_1_0_0; }
		
		//GOBACK
		public RuleCall getGOBACKTerminalRuleCall_1_1() { return cGOBACKTerminalRuleCall_1_1; }
		
		//ROOT
		public RuleCall getROOTTerminalRuleCall_1_2() { return cROOTTerminalRuleCall_1_2; }
		
		//('.' (values+=ID | GOBACK))*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//(values+=ID | GOBACK)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//values+=ID
		public Assignment getValuesAssignment_2_1_0() { return cValuesAssignment_2_1_0; }
		
		//ID
		public RuleCall getValuesIDTerminalRuleCall_2_1_0_0() { return cValuesIDTerminalRuleCall_2_1_0_0; }
		
		//GOBACK
		public RuleCall getGOBACKTerminalRuleCall_2_1_1() { return cGOBACKTerminalRuleCall_2_1_1; }
	}
	public class ModifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Modify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathPathParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Assignment cJsonObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJsonObjectJsonObjectParserRuleCall_2_0 = (RuleCall)cJsonObjectAssignment_2.eContents().get(0);
		
		//Modify:
		//    'modify' (path=Path)? jsonObject=JsonObject
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'modify' (path=Path)? jsonObject=JsonObject
		public Group getGroup() { return cGroup; }
		
		//'modify'
		public Keyword getModifyKeyword_0() { return cModifyKeyword_0; }
		
		//(path=Path)?
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//Path
		public RuleCall getPathPathParserRuleCall_1_0() { return cPathPathParserRuleCall_1_0; }
		
		//jsonObject=JsonObject
		public Assignment getJsonObjectAssignment_2() { return cJsonObjectAssignment_2; }
		
		//JsonObject
		public RuleCall getJsonObjectJsonObjectParserRuleCall_2_0() { return cJsonObjectJsonObjectParserRuleCall_2_0; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathTOStoreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathTOStorePathParserRuleCall_1_0 = (RuleCall)cPathTOStoreAssignment_1.eContents().get(0);
		private final Assignment cPathToAddAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathToAddPathParserRuleCall_2_0 = (RuleCall)cPathToAddAssignment_2.eContents().get(0);
		
		////Logique -> On somme les deux paramètres mais on stocke à l'emplacement du premier
		//Sum:
		//    'sum' pathTOStore=Path pathToAdd=Path
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sum' pathTOStore=Path pathToAdd=Path
		public Group getGroup() { return cGroup; }
		
		//'sum'
		public Keyword getSumKeyword_0() { return cSumKeyword_0; }
		
		//pathTOStore=Path
		public Assignment getPathTOStoreAssignment_1() { return cPathTOStoreAssignment_1; }
		
		//Path
		public RuleCall getPathTOStorePathParserRuleCall_1_0() { return cPathTOStorePathParserRuleCall_1_0; }
		
		//pathToAdd=Path
		public Assignment getPathToAddAssignment_2() { return cPathToAddAssignment_2; }
		
		//Path
		public RuleCall getPathToAddPathParserRuleCall_2_0() { return cPathToAddPathParserRuleCall_2_0; }
	}
	public class RemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Remove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRemoveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRemoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathPathParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		
		////Logique -> Si pas de Path alors on supprime à partir du Path courant
		//Remove:
		//    {Remove} 'remove' (path=Path)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Remove} 'remove' (path=Path)?
		public Group getGroup() { return cGroup; }
		
		//{Remove}
		public Action getRemoveAction_0() { return cRemoveAction_0; }
		
		//'remove'
		public Keyword getRemoveKeyword_1() { return cRemoveKeyword_1; }
		
		//(path=Path)?
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//Path
		public RuleCall getPathPathParserRuleCall_2_0() { return cPathPathParserRuleCall_2_0; }
	}
	public class MultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Mult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathTOStoreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathTOStorePathParserRuleCall_1_0 = (RuleCall)cPathTOStoreAssignment_1.eContents().get(0);
		private final Assignment cPathToMultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathToMultPathParserRuleCall_2_0 = (RuleCall)cPathToMultAssignment_2.eContents().get(0);
		
		////Logique -> On multiplie les deux paramètres mais on stocke à l'emplacement du premier
		//Mult:
		//    'mult' pathTOStore=Path pathToMult=Path
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'mult' pathTOStore=Path pathToMult=Path
		public Group getGroup() { return cGroup; }
		
		//'mult'
		public Keyword getMultKeyword_0() { return cMultKeyword_0; }
		
		//pathTOStore=Path
		public Assignment getPathTOStoreAssignment_1() { return cPathTOStoreAssignment_1; }
		
		//Path
		public RuleCall getPathTOStorePathParserRuleCall_1_0() { return cPathTOStorePathParserRuleCall_1_0; }
		
		//pathToMult=Path
		public Assignment getPathToMultAssignment_2() { return cPathToMultAssignment_2; }
		
		//Path
		public RuleCall getPathToMultPathParserRuleCall_2_0() { return cPathToMultPathParserRuleCall_2_0; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathPathParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//Select:
		//    'select' path=Path
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' path=Path
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//path=Path
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//Path
		public RuleCall getPathPathParserRuleCall_1_0() { return cPathPathParserRuleCall_1_0; }
	}
	public class FinalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Final");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStoreParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Final:
		//    (Print | Store)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Print | Store)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Print
		public RuleCall getPrintParserRuleCall_0() { return cPrintParserRuleCall_0; }
		
		//Store
		public RuleCall getStoreParserRuleCall_1() { return cStoreParserRuleCall_1; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Store");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathPathParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Assignment cFilePathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilePathSTRINGTerminalRuleCall_2_0 = (RuleCall)cFilePathAssignment_2.eContents().get(0);
		
		//Store:
		//    'store' (path=Path)? filePath=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'store' (path=Path)? filePath=STRING
		public Group getGroup() { return cGroup; }
		
		//'store'
		public Keyword getStoreKeyword_0() { return cStoreKeyword_0; }
		
		//(path=Path)?
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//Path
		public RuleCall getPathPathParserRuleCall_1_0() { return cPathPathParserRuleCall_1_0; }
		
		//filePath=STRING
		public Assignment getFilePathAssignment_2() { return cFilePathAssignment_2; }
		
		//STRING
		public RuleCall getFilePathSTRINGTerminalRuleCall_2_0() { return cFilePathSTRINGTerminalRuleCall_2_0; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathPathParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		
		//Print:
		//    {Print} 'print' (path=Path)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Print} 'print' (path=Path)?
		public Group getGroup() { return cGroup; }
		
		//{Print}
		public Action getPrintAction_0() { return cPrintAction_0; }
		
		//'print'
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
		
		//(path=Path)?
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//Path
		public RuleCall getPathPathParserRuleCall_2_0() { return cPathPathParserRuleCall_2_0; }
	}
	public class JsonObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.JsonObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJsonEntriesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJsonPrimitiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JsonObject:
		//    (JsonEntries | JsonPrimitive)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(JsonEntries | JsonPrimitive)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JsonEntries
		public RuleCall getJsonEntriesParserRuleCall_0() { return cJsonEntriesParserRuleCall_0; }
		
		//JsonPrimitive
		public RuleCall getJsonPrimitiveParserRuleCall_1() { return cJsonPrimitiveParserRuleCall_1; }
	}
	public class JsonPrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.JsonPrimitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cJsonPrimitiveAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cArrayObjectParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cJsonPrimitiveAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cNumberObjectParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//JsonPrimitive:
		//    (StringObject | BooleanObject | {JsonPrimitive} NULL | ArrayObject | {JsonPrimitive} NumberObject)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(StringObject | BooleanObject | {JsonPrimitive} NULL | ArrayObject | {JsonPrimitive} NumberObject)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringObject
		public RuleCall getStringObjectParserRuleCall_0() { return cStringObjectParserRuleCall_0; }
		
		//BooleanObject
		public RuleCall getBooleanObjectParserRuleCall_1() { return cBooleanObjectParserRuleCall_1; }
		
		//{JsonPrimitive} NULL
		public Group getGroup_2() { return cGroup_2; }
		
		//{JsonPrimitive}
		public Action getJsonPrimitiveAction_2_0() { return cJsonPrimitiveAction_2_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_2_1() { return cNULLTerminalRuleCall_2_1; }
		
		//ArrayObject
		public RuleCall getArrayObjectParserRuleCall_3() { return cArrayObjectParserRuleCall_3; }
		
		//{JsonPrimitive} NumberObject
		public Group getGroup_4() { return cGroup_4; }
		
		//{JsonPrimitive}
		public Action getJsonPrimitiveAction_4_0() { return cJsonPrimitiveAction_4_0; }
		
		//NumberObject
		public RuleCall getNumberObjectParserRuleCall_4_1() { return cNumberObjectParserRuleCall_4_1; }
	}
	public class NumberObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.NumberObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberObject:
		//    (INT | DOUBLE)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(INT | DOUBLE)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1() { return cDOUBLETerminalRuleCall_1; }
	}
	public class ArrayObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.ArrayObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesJsonObjectParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesJsonObjectParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayObject:
		//    {ArrayObject} '['
		//    (values+=JsonObject
		//    (',' values+=JsonObject)*)?
		//    ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArrayObject} '['
		//(values+=JsonObject
		//(',' values+=JsonObject)*)?
		//']'
		public Group getGroup() { return cGroup; }
		
		//{ArrayObject}
		public Action getArrayObjectAction_0() { return cArrayObjectAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(values+=JsonObject
		//(',' values+=JsonObject)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=JsonObject
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//JsonObject
		public RuleCall getValuesJsonObjectParserRuleCall_2_0_0() { return cValuesJsonObjectParserRuleCall_2_0_0; }
		
		//(',' values+=JsonObject)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//values+=JsonObject
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }
		
		//JsonObject
		public RuleCall getValuesJsonObjectParserRuleCall_2_1_1_0() { return cValuesJsonObjectParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class BooleanObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.BooleanObject");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanObject:
		//    value=Boolean
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Boolean
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Boolean
		public RuleCall getValueBooleanEnumRuleCall_0() { return cValueBooleanEnumRuleCall_0; }
	}
	public class StringObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.StringObject");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringObject:
		//    value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class JsonEntriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.JsonEntries");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListEntriesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListEntriesJsonEntryParserRuleCall_1_0 = (RuleCall)cListEntriesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cListEntriesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListEntriesJsonEntryParserRuleCall_2_1_0 = (RuleCall)cListEntriesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JsonEntries:
		//    '{'
		//    listEntries+=JsonEntry
		//    (',' listEntries+=JsonEntry)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//listEntries+=JsonEntry
		//(',' listEntries+=JsonEntry)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//listEntries+=JsonEntry
		public Assignment getListEntriesAssignment_1() { return cListEntriesAssignment_1; }
		
		//JsonEntry
		public RuleCall getListEntriesJsonEntryParserRuleCall_1_0() { return cListEntriesJsonEntryParserRuleCall_1_0; }
		
		//(',' listEntries+=JsonEntry)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//listEntries+=JsonEntry
		public Assignment getListEntriesAssignment_2_1() { return cListEntriesAssignment_2_1; }
		
		//JsonEntry
		public RuleCall getListEntriesJsonEntryParserRuleCall_2_1_0() { return cListEntriesJsonEntryParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class JsonEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.JsonEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyIDTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cJsonObjectAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJsonObjectJsonObjectParserRuleCall_4_0 = (RuleCall)cJsonObjectAssignment_4.eContents().get(0);
		
		//JsonEntry:
		//    '\"' key=ID '\"' ':' jsonObject=JsonObject
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'\"' key=ID '\"' ':' jsonObject=JsonObject
		public Group getGroup() { return cGroup; }
		
		//'\"'
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//key=ID
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_1_0() { return cKeyIDTerminalRuleCall_1_0; }
		
		//'\"'
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//jsonObject=JsonObject
		public Assignment getJsonObjectAssignment_4() { return cJsonObjectAssignment_4; }
		
		//JsonObject
		public RuleCall getJsonObjectJsonObjectParserRuleCall_4_0() { return cJsonObjectJsonObjectParserRuleCall_4_0; }
	}
	
	public class BooleanElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Boolean:
		//    TRUE='true' | FALSE='false'
		//;
		public EnumRule getRule() { return rule; }
		
		//TRUE='true' | FALSE='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE='true'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//'true'
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }
		
		//FALSE='false'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//'false'
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	
	private final JsonCommandsElements pJsonCommands;
	private final JsonCommandElements pJsonCommand;
	private final InitialisationElements pInitialisation;
	private final OperationElements pOperation;
	private final InsertElements pInsert;
	private final TerminalRule tGOBACK;
	private final TerminalRule tROOT;
	private final PathElements pPath;
	private final ModifyElements pModify;
	private final SumElements pSum;
	private final RemoveElements pRemove;
	private final MultElements pMult;
	private final SelectElements pSelect;
	private final FinalElements pFinal;
	private final StoreElements pStore;
	private final PrintElements pPrint;
	private final JsonObjectElements pJsonObject;
	private final JsonPrimitiveElements pJsonPrimitive;
	private final NumberObjectElements pNumberObject;
	private final TerminalRule tDOUBLE;
	private final ArrayObjectElements pArrayObject;
	private final TerminalRule tNULL;
	private final BooleanObjectElements pBooleanObject;
	private final BooleanElements eBoolean;
	private final StringObjectElements pStringObject;
	private final JsonEntriesElements pJsonEntries;
	private final JsonEntryElements pJsonEntry;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JsonProjectGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJsonCommands = new JsonCommandsElements();
		this.pJsonCommand = new JsonCommandElements();
		this.pInitialisation = new InitialisationElements();
		this.pOperation = new OperationElements();
		this.pInsert = new InsertElements();
		this.tGOBACK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.GOBACK");
		this.tROOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.ROOT");
		this.pPath = new PathElements();
		this.pModify = new ModifyElements();
		this.pSum = new SumElements();
		this.pRemove = new RemoveElements();
		this.pMult = new MultElements();
		this.pSelect = new SelectElements();
		this.pFinal = new FinalElements();
		this.pStore = new StoreElements();
		this.pPrint = new PrintElements();
		this.pJsonObject = new JsonObjectElements();
		this.pJsonPrimitive = new JsonPrimitiveElements();
		this.pNumberObject = new NumberObjectElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.DOUBLE");
		this.pArrayObject = new ArrayObjectElements();
		this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.jsonProject.JsonProject.NULL");
		this.pBooleanObject = new BooleanObjectElements();
		this.eBoolean = new BooleanElements();
		this.pStringObject = new StringObjectElements();
		this.pJsonEntries = new JsonEntriesElements();
		this.pJsonEntry = new JsonEntryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.jsonProject.JsonProject".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//JsonCommands:
	//    jsonCommands+=JsonCommand*
	//;
	public JsonCommandsElements getJsonCommandsAccess() {
		return pJsonCommands;
	}
	
	public ParserRule getJsonCommandsRule() {
		return getJsonCommandsAccess().getRule();
	}
	
	//JsonCommand:
	//    init=Initialisation
	//    (operations+=Operation)*
	//    final=Final
	//;
	public JsonCommandElements getJsonCommandAccess() {
		return pJsonCommand;
	}
	
	public ParserRule getJsonCommandRule() {
		return getJsonCommandAccess().getRule();
	}
	
	//Initialisation:
	//    'load' filePath=STRING
	//;
	public InitialisationElements getInitialisationAccess() {
		return pInitialisation;
	}
	
	public ParserRule getInitialisationRule() {
		return getInitialisationAccess().getRule();
	}
	
	//Operation:
	//    (Insert | Modify | Sum | Remove | Mult | Select)
	//;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Insert:
	//    'insert' jsonObject=JsonObject (path=Path)?
	//;
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//terminal GOBACK : '?';
	public TerminalRule getGOBACKRule() {
		return tGOBACK;
	}
	
	//terminal ROOT : '$';
	public TerminalRule getROOTRule() {
		return tROOT;
	}
	
	//Path:
	//    {Path} (values+=ID | GOBACK | ROOT)
	//    ('.' (values+=ID | GOBACK))*
	//;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//Modify:
	//    'modify' (path=Path)? jsonObject=JsonObject
	//;
	public ModifyElements getModifyAccess() {
		return pModify;
	}
	
	public ParserRule getModifyRule() {
		return getModifyAccess().getRule();
	}
	
	////Logique -> On somme les deux paramètres mais on stocke à l'emplacement du premier
	//Sum:
	//    'sum' pathTOStore=Path pathToAdd=Path
	//;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	////Logique -> Si pas de Path alors on supprime à partir du Path courant
	//Remove:
	//    {Remove} 'remove' (path=Path)?
	//;
	public RemoveElements getRemoveAccess() {
		return pRemove;
	}
	
	public ParserRule getRemoveRule() {
		return getRemoveAccess().getRule();
	}
	
	////Logique -> On multiplie les deux paramètres mais on stocke à l'emplacement du premier
	//Mult:
	//    'mult' pathTOStore=Path pathToMult=Path
	//;
	public MultElements getMultAccess() {
		return pMult;
	}
	
	public ParserRule getMultRule() {
		return getMultAccess().getRule();
	}
	
	//Select:
	//    'select' path=Path
	//;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//Final:
	//    (Print | Store)
	//;
	public FinalElements getFinalAccess() {
		return pFinal;
	}
	
	public ParserRule getFinalRule() {
		return getFinalAccess().getRule();
	}
	
	//Store:
	//    'store' (path=Path)? filePath=STRING
	//;
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//Print:
	//    {Print} 'print' (path=Path)?
	//;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//JsonObject:
	//    (JsonEntries | JsonPrimitive)
	//;
	public JsonObjectElements getJsonObjectAccess() {
		return pJsonObject;
	}
	
	public ParserRule getJsonObjectRule() {
		return getJsonObjectAccess().getRule();
	}
	
	//JsonPrimitive:
	//    (StringObject | BooleanObject | {JsonPrimitive} NULL | ArrayObject | {JsonPrimitive} NumberObject)
	//;
	public JsonPrimitiveElements getJsonPrimitiveAccess() {
		return pJsonPrimitive;
	}
	
	public ParserRule getJsonPrimitiveRule() {
		return getJsonPrimitiveAccess().getRule();
	}
	
	//NumberObject:
	//    (INT | DOUBLE)
	//;
	public NumberObjectElements getNumberObjectAccess() {
		return pNumberObject;
	}
	
	public ParserRule getNumberObjectRule() {
		return getNumberObjectAccess().getRule();
	}
	
	//terminal DOUBLE:
	//    INT '.' INT
	//;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//ArrayObject:
	//    {ArrayObject} '['
	//    (values+=JsonObject
	//    (',' values+=JsonObject)*)?
	//    ']'
	//;
	public ArrayObjectElements getArrayObjectAccess() {
		return pArrayObject;
	}
	
	public ParserRule getArrayObjectRule() {
		return getArrayObjectAccess().getRule();
	}
	
	//terminal NULL:
	//    'null'
	//;
	public TerminalRule getNULLRule() {
		return tNULL;
	}
	
	//BooleanObject:
	//    value=Boolean
	//;
	public BooleanObjectElements getBooleanObjectAccess() {
		return pBooleanObject;
	}
	
	public ParserRule getBooleanObjectRule() {
		return getBooleanObjectAccess().getRule();
	}
	
	//enum Boolean:
	//    TRUE='true' | FALSE='false'
	//;
	public BooleanElements getBooleanAccess() {
		return eBoolean;
	}
	
	public EnumRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//StringObject:
	//    value=STRING
	//;
	public StringObjectElements getStringObjectAccess() {
		return pStringObject;
	}
	
	public ParserRule getStringObjectRule() {
		return getStringObjectAccess().getRule();
	}
	
	//JsonEntries:
	//    '{'
	//    listEntries+=JsonEntry
	//    (',' listEntries+=JsonEntry)*
	//    '}'
	//;
	public JsonEntriesElements getJsonEntriesAccess() {
		return pJsonEntries;
	}
	
	public ParserRule getJsonEntriesRule() {
		return getJsonEntriesAccess().getRule();
	}
	
	//JsonEntry:
	//    '\"' key=ID '\"' ':' jsonObject=JsonObject
	//;
	public JsonEntryElements getJsonEntryAccess() {
		return pJsonEntry;
	}
	
	public ParserRule getJsonEntryRule() {
		return getJsonEntryAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
